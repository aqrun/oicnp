//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize, Default)]
#[sea_orm(table_name = "node_body")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub nid: i64,
    #[sea_orm(column_type = "Text")]
    pub summary: String,
    pub summary_format: String,
    #[sea_orm(column_type = "Text")]
    pub body: String,
    pub body_format: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Node,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Node => Entity::belongs_to(super::node::Entity)
                .from(Column::Nid)
                .to(super::node::Column::Nid)
                .into(),
        }
    }
}

impl Related<super::prelude::NodeEntity> for Entity {
    fn to() -> RelationDef {
        Relation::Node.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
