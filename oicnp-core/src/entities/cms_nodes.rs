//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "cms_nodes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub nid: String,
    pub vid: Option<String>,
    pub bundle: Option<String>,
    pub title: Option<String>,
    pub viewed: Option<i32>,
    pub deleted: Option<String>,
    pub published_at: Option<DateTime>,
    pub created_by: Option<String>,
    pub updated_by: Option<String>,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::cms_node_body::Entity")]
    NodeBody,
}

impl Related<super::cms_node_body::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NodeBody.def()
    }
}

impl Related<super::cms_taxonomies::Entity> for Entity {
    fn to() -> RelationDef {
        super::cms_node_taxonomies_map::Relation::Taxonomy.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::cms_node_taxonomies_map::Relation::Node.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&str> for Column {
    fn from(name: &str) -> Self {
        match name {
            "created_at" => Column::CreatedAt,
            _ => Column::Nid,
        }
    }
}

